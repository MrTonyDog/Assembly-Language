段内转移:jmp ax         段内转移又分为:短转移和近转移
段间转移:jmp 1000:0

8086转移指令分为以下几类：
1.无条件转移指令
2.条件转移指令
3.循环指令(如Loop)
4.过程
5.中断

操作符offset    (由编译器处理的符号,它的功能是取得标号的偏移地址)

jmp xxx      ：机器码格式下, xxx 显示的是跳转的偏移地址

转移地址在内存中的jmp指令:
    ;1.jmp word ptr 内存单元地址(段内转移)  :   修改IP,CS
    ;功能：从内存单元地址处开始存放着一个字，是转移的目的偏移地址

    ;内存单元地址可用寻址方式的任一格式给出,例如：
    ;mov ax,0123H
    ;mov ds:[0],ax
    ;jmp word ptr ds:[0]
    ;执行后，(IP)=0123H

    ;2.jmp dword ptr 内存单元地址(段间转移)
    ;功能:从内存单元地址处开始存放两个字，高地址处的字是转移的目的段地址，低地址处是转移的目的偏移地址
    ;(CS)=(内存单元地址+2）
    ;(IP)=(内存单元地址)
    ;内存单元地址可用寻址方式的任一格式给出,例如：
    ;mov ax,0123H
    ;mov ds:[0],ax
    ;mov word ptr ds:[0],0
    ;jmp dword ptr ds:[0]
    ;执行后，(CS)=0,(IP)=0123H ,CS:IP 指向0000:0123H

    ;要使程序中的jmp指令执行后，CS:IP指向程序的第一条指令


jcxz指令:
    jcxz指令为有条件跳转指令，所有的有条件转移指令都是短转移，
在对应的机器码中包含转移的位移,而不是目的地址，对IP的修改范围都为:-128~127

    指令格式：jcxz 标号(如果(cx)=0,转移到标号处执行)
    操作:当(cx)=0时，(IP)=(IP)+8位位移
    8位位移=标号处的地址-jcxz指令后的第一个字节的地址
    8位位移的范围为-128~127 ，用补码表示
    8位位移由编译程序在编译时算出

    当(cx)!=0 时，什么也不做(程序继续向下执行)
    我们从jcxz功能中可以看出,"jcxz 标号" 的功能就相当于：
    if((cx)==0)
    jmp short 标号


Loop 指令
    Loop 指令为循环指令，所有的循环指令都是短转移，在对应的机器码中包含转移的位移，
而不是目的地址，对IP的修改范围都为：-128~127

    指令格式：Loop 标号(    (cx)=(cx)-1,如果(cx)!=0,转移到标号处执行    )
操作:
    1.(cx)=(cx)-1
    2.如果(cx)!=0, (IP)=(IP)+8位位移
    8位位移=标号处的地址-Loop指令后的第一个字节的地址
    8位位移的范围为-128~127 ，用补码表示
    8位位移由编译程序在编译时算出

    Loop 标号 的功能就相当于：
    (cx)--;
    if( (cx)!=0 ) 
        jmp short 标号;


根据位移进行转移的意义：
    如果Loop s 的机器码中包含的是 s 的地址，则就对程序段在内存
    中的偏移地址有了严格的限制.因为机器码中包含的是 s 的地址，如果 s 处的指令不在
    目的地址处，程序的执行就会出错

编译器对转移位移超界的检测:如果在源程序中出现了转移范围超界的问题，在编译的时候，
编译器将报错
（注意 在第二章中讲到的形如 jmp 2000:0100 的转移指令，是在Debug 中使用的，
  汇编编译器并不认识，所以编译时会报错)
